// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/sample-server.proto

package sample

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SampleServer service

func NewSampleServerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "SampleServer.CreateVM",
			Path:    []string{"/servers"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "SampleServer.GetVMList",
			Path:    []string{"/servers"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "SampleServer.GetVM",
			Path:    []string{"/servers/{vm_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "SampleServer.GetVMStatus",
			Path:    []string{"/servers/{vm_id}/status"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "SampleServer.DeleteVM",
			Path:    []string{"/servers/{vm_id}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "SampleServer.CheckNameAvailability",
			Path:    []string{"/check/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for SampleServer service

type SampleServerService interface {
	// VM Creation
	CreateVM(ctx context.Context, in *CreateVMRequest, opts ...client.CallOption) (*CreateVMResponse, error)
	// VM List
	GetVMList(ctx context.Context, in *Empty, opts ...client.CallOption) (*GetVMListResponse, error)
	// VM Get
	GetVM(ctx context.Context, in *GetVMRequest, opts ...client.CallOption) (*GetVMResponse, error)
	// VM Status
	GetVMStatus(ctx context.Context, in *GetVMStatusRequest, opts ...client.CallOption) (*GetVMStatusResponse, error)
	// VM Delete
	DeleteVM(ctx context.Context, in *DeleteVMRequest, opts ...client.CallOption) (*Empty, error)
	// VM Name Availability Check
	CheckNameAvailability(ctx context.Context, in *CheckNameAvailabilityRequest, opts ...client.CallOption) (*Empty, error)
}

type sampleServerService struct {
	c    client.Client
	name string
}

func NewSampleServerService(name string, c client.Client) SampleServerService {
	return &sampleServerService{
		c:    c,
		name: name,
	}
}

func (c *sampleServerService) CreateVM(ctx context.Context, in *CreateVMRequest, opts ...client.CallOption) (*CreateVMResponse, error) {
	req := c.c.NewRequest(c.name, "SampleServer.CreateVM", in)
	out := new(CreateVMResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServerService) GetVMList(ctx context.Context, in *Empty, opts ...client.CallOption) (*GetVMListResponse, error) {
	req := c.c.NewRequest(c.name, "SampleServer.GetVMList", in)
	out := new(GetVMListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServerService) GetVM(ctx context.Context, in *GetVMRequest, opts ...client.CallOption) (*GetVMResponse, error) {
	req := c.c.NewRequest(c.name, "SampleServer.GetVM", in)
	out := new(GetVMResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServerService) GetVMStatus(ctx context.Context, in *GetVMStatusRequest, opts ...client.CallOption) (*GetVMStatusResponse, error) {
	req := c.c.NewRequest(c.name, "SampleServer.GetVMStatus", in)
	out := new(GetVMStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServerService) DeleteVM(ctx context.Context, in *DeleteVMRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "SampleServer.DeleteVM", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServerService) CheckNameAvailability(ctx context.Context, in *CheckNameAvailabilityRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "SampleServer.CheckNameAvailability", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SampleServer service

type SampleServerHandler interface {
	// VM Creation
	CreateVM(context.Context, *CreateVMRequest, *CreateVMResponse) error
	// VM List
	GetVMList(context.Context, *Empty, *GetVMListResponse) error
	// VM Get
	GetVM(context.Context, *GetVMRequest, *GetVMResponse) error
	// VM Status
	GetVMStatus(context.Context, *GetVMStatusRequest, *GetVMStatusResponse) error
	// VM Delete
	DeleteVM(context.Context, *DeleteVMRequest, *Empty) error
	// VM Name Availability Check
	CheckNameAvailability(context.Context, *CheckNameAvailabilityRequest, *Empty) error
}

func RegisterSampleServerHandler(s server.Server, hdlr SampleServerHandler, opts ...server.HandlerOption) error {
	type sampleServer interface {
		CreateVM(ctx context.Context, in *CreateVMRequest, out *CreateVMResponse) error
		GetVMList(ctx context.Context, in *Empty, out *GetVMListResponse) error
		GetVM(ctx context.Context, in *GetVMRequest, out *GetVMResponse) error
		GetVMStatus(ctx context.Context, in *GetVMStatusRequest, out *GetVMStatusResponse) error
		DeleteVM(ctx context.Context, in *DeleteVMRequest, out *Empty) error
		CheckNameAvailability(ctx context.Context, in *CheckNameAvailabilityRequest, out *Empty) error
	}
	type SampleServer struct {
		sampleServer
	}
	h := &sampleServerHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SampleServer.CreateVM",
		Path:    []string{"/servers"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SampleServer.GetVMList",
		Path:    []string{"/servers"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SampleServer.GetVM",
		Path:    []string{"/servers/{vm_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SampleServer.GetVMStatus",
		Path:    []string{"/servers/{vm_id}/status"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SampleServer.DeleteVM",
		Path:    []string{"/servers/{vm_id}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SampleServer.CheckNameAvailability",
		Path:    []string{"/check/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&SampleServer{h}, opts...))
}

type sampleServerHandler struct {
	SampleServerHandler
}

func (h *sampleServerHandler) CreateVM(ctx context.Context, in *CreateVMRequest, out *CreateVMResponse) error {
	return h.SampleServerHandler.CreateVM(ctx, in, out)
}

func (h *sampleServerHandler) GetVMList(ctx context.Context, in *Empty, out *GetVMListResponse) error {
	return h.SampleServerHandler.GetVMList(ctx, in, out)
}

func (h *sampleServerHandler) GetVM(ctx context.Context, in *GetVMRequest, out *GetVMResponse) error {
	return h.SampleServerHandler.GetVM(ctx, in, out)
}

func (h *sampleServerHandler) GetVMStatus(ctx context.Context, in *GetVMStatusRequest, out *GetVMStatusResponse) error {
	return h.SampleServerHandler.GetVMStatus(ctx, in, out)
}

func (h *sampleServerHandler) DeleteVM(ctx context.Context, in *DeleteVMRequest, out *Empty) error {
	return h.SampleServerHandler.DeleteVM(ctx, in, out)
}

func (h *sampleServerHandler) CheckNameAvailability(ctx context.Context, in *CheckNameAvailabilityRequest, out *Empty) error {
	return h.SampleServerHandler.CheckNameAvailability(ctx, in, out)
}
